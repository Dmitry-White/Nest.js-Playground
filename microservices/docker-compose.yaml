services:
  virtual-facility:
    hostname: ${VF_APP_NAME}
    container_name: ${VF_APP_NAME}
    depends_on:
      - ${VF_APP_NAME}-db
      - ${WS_APP_NAME}
    networks:
      - shared-network
      - virtual-facility-network
    build:
      context: .
      dockerfile: ./Dockerfile
      args:
        - APP_NAME=${VF_APP_NAME}
    volumes:
      - ./libs:/usr/src/app/libs
      - ./package.json:/usr/src/app/package.json
      - ./tsconfig.json:/usr/src/app/tsconfig.json
      - ./apps/${VF_APP_NAME}:/usr/src/app/apps/${VF_APP_NAME}
      # Note: This is usually not a good practice to mount the "node_modules" directory on the host to the container
      # We are doing this for the sake of simplicity in this example
      #- ./node_modules:/usr/src/app/node_modules
    ports:
      - 3000:3000
    command: npm run start:dev -- ${VF_APP_NAME}
    environment:
      - POSTGRES_PORT=${POSTGRES_PORT}
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_HOST=${VF_APP_NAME}-db
      - POSTGRES_DB=${VF_APP_NAME}

  virtual-facility-db:
    image: postgres:13.2-alpine
    hostname: ${VF_APP_NAME}-db
    container_name: ${VF_APP_NAME}-db
    networks:
      - virtual-facility-network
    environment:
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_DB=${VF_APP_NAME}

  workflows-service:
    hostname: ${WS_APP_NAME}
    container_name: ${WS_APP_NAME}
    depends_on:
      - ${WS_APP_NAME}-db
    networks:
      - shared-network
      - workflows-service-network
    build:
      context: .
      dockerfile: ./Dockerfile
      args:
        - APP_NAME=${WS_APP_NAME}
    volumes:
      - ./libs:/usr/src/app/libs
      - ./package.json:/usr/src/app/package.json
      - ./tsconfig.json:/usr/src/app/tsconfig.json
      - ./apps/${WS_APP_NAME}:/usr/src/app/apps/${WS_APP_NAME}
      # Note: This is usually not a good practice to mount the "node_modules" directory on the host to the container
      # We are doing this for the sake of simplicity in this example
      #- ./node_modules:/usr/src/app/node_modules
    command: npm run start:dev -- ${WS_APP_NAME}
    environment:
      - POSTGRES_PORT=${POSTGRES_PORT}
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_HOST=${WS_APP_NAME}-db
      - POSTGRES_DB=${WS_APP_NAME}

  workflows-service-db:
    image: postgres:13.2-alpine
    hostname: ${WS_APP_NAME}-db
    container_name: ${WS_APP_NAME}-db
    networks:
      - workflows-service-network
    environment:
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_DB=${WS_APP_NAME}


networks:
  virtual-facility-network:
    name: virtual-facility-network
    driver: bridge
  workflows-service-network:
    name: workflows-service-network
    driver: bridge
  shared-network:
    name: shared-network
    driver: bridge
