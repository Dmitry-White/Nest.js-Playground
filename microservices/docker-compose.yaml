services:
  virtual-facility:
    hostname: ${VF_APP_NAME}
    container_name: ${VF_APP_NAME}
    depends_on:
      - ${VF_APP_NAME}-db
      - ${RABBITMQ_HOST}
    networks:
      - shared-network
      - virtual-facility-network
    build:
      context: .
      dockerfile: ./Dockerfile
      args:
        - APP_NAME=${VF_APP_NAME}
    volumes:
      - ./libs:/usr/src/app/libs
      - ./package.json:/usr/src/app/package.json
      - ./tsconfig.json:/usr/src/app/tsconfig.json
      - ./apps/${VF_APP_NAME}:/usr/src/app/apps/${VF_APP_NAME}
    ports:
      - 3000:3000
    command: npm run start:dev -- ${VF_APP_NAME}
    environment:
      - APP_NAME=${VF_APP_NAME}
      - POSTGRES_PORT=${POSTGRES_PORT}
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_HOST=${VF_APP_NAME}-db
      - POSTGRES_DB=${VF_APP_NAME}
      - RABBITMQ_URL=amqp://${RABBITMQ_HOST}:${RABBITMQ_PORT}
      - RABBITMQ_QUEUE=${WS_APP_NAME}

  virtual-facility-db:
    image: postgres:latest
    hostname: ${VF_APP_NAME}-db
    container_name: ${VF_APP_NAME}-db
    networks:
      - virtual-facility-network
    environment:
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_DB=${VF_APP_NAME}

  workflows-service:
    hostname: ${WS_APP_NAME}
    depends_on:
      - ${WS_APP_NAME}-db
      - ${RABBITMQ_HOST}
    networks:
      - shared-network
      - workflows-service-network
    deploy:
      replicas: 3
    build:
      context: .
      dockerfile: ./Dockerfile
      args:
        - APP_NAME=${WS_APP_NAME}
    volumes:
      - ./libs:/usr/src/app/libs
      - ./package.json:/usr/src/app/package.json
      - ./tsconfig.json:/usr/src/app/tsconfig.json
      - ./apps/${WS_APP_NAME}:/usr/src/app/apps/${WS_APP_NAME}
    command: npm run start:dev -- ${WS_APP_NAME}
    environment:
      - APP_NAME=${WS_APP_NAME}
      - POSTGRES_PORT=${POSTGRES_PORT}
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_HOST=${WS_APP_NAME}-db
      - POSTGRES_DB=${WS_APP_NAME}
      - RABBITMQ_URL=amqp://${RABBITMQ_HOST}:${RABBITMQ_PORT}

  workflows-service-db:
    image: postgres:latest
    hostname: ${WS_APP_NAME}-db
    container_name: ${WS_APP_NAME}-db
    networks:
      - workflows-service-network
    ports:
      - ${POSTGRES_PORT}:${POSTGRES_PORT}
    environment:
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_DB=${WS_APP_NAME}

  nats:
    image: nats:latest
    hostname: ${NATS_HOST}
    container_name: ${NATS_HOST}
    networks:
      - shared-network

  rabbitmq:
    image: rabbitmq:management
    hostname: ${RABBITMQ_HOST}
    container_name: ${RABBITMQ_HOST}
    networks:
      - shared-network
    ports:
      - ${RABBITMQ_UI_PORT}:${RABBITMQ_UI_PORT}

  alarms-generator:
    hostname: ${AG_APP_NAME}
    container_name: ${AG_APP_NAME}
    depends_on:
      - ${NATS_HOST}
    networks:
      - shared-network
      - alarms-network
    build:
      context: .
      dockerfile: ./Dockerfile
      args:
        - APP_NAME=${AG_APP_NAME}
    volumes:
      - ./libs:/usr/src/app/libs
      - ./package.json:/usr/src/app/package.json
      - ./tsconfig.json:/usr/src/app/tsconfig.json
      - ./apps/${AG_APP_NAME}:/usr/src/app/apps/${AG_APP_NAME}
    command: npm run start:dev -- ${AG_APP_NAME}
    environment:
      - APP_NAME=${AG_APP_NAME}
      - NATS_URL=nats://${NATS_HOST}:${NATS_PORT}

  alarms-service:
    hostname: ${AS_APP_NAME}
    container_name: ${AS_APP_NAME}
    depends_on:
      - ${NATS_HOST}
    networks:
      - shared-network
      - alarms-network
    build:
      context: .
      dockerfile: ./Dockerfile
      args:
        - APP_NAME=${AS_APP_NAME}
    volumes:
      - ./libs:/usr/src/app/libs
      - ./package.json:/usr/src/app/package.json
      - ./tsconfig.json:/usr/src/app/tsconfig.json
      - ./apps/${AS_APP_NAME}:/usr/src/app/apps/${AS_APP_NAME}
    command: npm run start:dev -- ${AS_APP_NAME}
    environment:
      - APP_NAME=${AS_APP_NAME}
      - NATS_URL=nats://${NATS_HOST}:${NATS_PORT}

  alarms-classifier:
    hostname: ${AC_APP_NAME}
    container_name: ${AC_APP_NAME}
    depends_on:
      - ${NATS_HOST}
    networks:
      - shared-network
      - alarms-network
    build:
      context: .
      dockerfile: ./Dockerfile
      args:
        - APP_NAME=${AC_APP_NAME}
    volumes:
      - ./libs:/usr/src/app/libs
      - ./package.json:/usr/src/app/package.json
      - ./tsconfig.json:/usr/src/app/tsconfig.json
      - ./apps/${AC_APP_NAME}:/usr/src/app/apps/${AC_APP_NAME}
    command: npm run start:dev -- ${AC_APP_NAME}
    environment:
      - APP_NAME=${AC_APP_NAME}
      - NATS_URL=nats://${NATS_HOST}:${NATS_PORT}

  notifications-service:
    hostname: ${NS_APP_NAME}
    container_name: ${NS_APP_NAME}
    depends_on:
      - ${NATS_HOST}
    networks:
      - shared-network
    build:
      context: .
      dockerfile: ./Dockerfile
      args:
        - APP_NAME=${NS_APP_NAME}
    volumes:
      - ./libs:/usr/src/app/libs
      - ./package.json:/usr/src/app/package.json
      - ./tsconfig.json:/usr/src/app/tsconfig.json
      - ./apps/${NS_APP_NAME}:/usr/src/app/apps/${NS_APP_NAME}
    command: npm run start:dev -- ${NS_APP_NAME}
    environment:
      - APP_NAME=${NS_APP_NAME}
      - NATS_URL=nats://${NATS_HOST}:${NATS_PORT}

networks:
  shared-network:
    name: shared-network
    driver: bridge
  virtual-facility-network:
    name: virtual-facility-network
    driver: bridge
  workflows-service-network:
    name: workflows-service-network
    driver: bridge
  alarms-network:
    name: alarms-network
    driver: bridge
